1) 목표/개요
   -1. 목표: 한글/영문 혼합 문서의 OCR 품질과 처리 속도 향상을 위해 엔진 교체 + 레이아웃·테이블·수식 파이프라인 구성.
   -2. 범위: 오픈소스 가중치만 사용, 파인튜닝 없이 결합/전처리 로직 최적화에 집중.

2) 엔진/전처리 파이프라인
   -1. EasyOCR(ko+en) 채택: PaddleOCR 대비 2–3배 속도 개선, 한자 인식은 양 엔진 모두 한계.
   -2. Layout Detection(DiT)
       - 기본 라벨: Text/Title/List/Table/Figure
       - 한계: 논문 특화 → 일반 문서/one-column/3+ columns/각주·캡션 분리 취약, 탐지 순서 무작위
       - 대응: 박스 좌표 기반 정렬 후 OCR, 테이블·수식 영역 제거 후 본문 OCR 분리 처리
   -3. Table → Markdown
       - Detection(hf) → img2table(EasyOCR) 추출
       - 복잡/다중 테이블에서 잘림/누락/불완전 추출 발생
   -4. 수식 → LaTeX
       - Detection(Pix2Text) → RapidLaTeXOCR 변환
       - 검출이 정확할 때 변환은 양호, 단 입력 크롭 해상도에 민감
   -5. 띄어쓰기 보정(P yKoSpacing)
       - 한국어만 정규식으로 분리 후 적용(일반 문장 기준 정상, 문서 전용 표기 예외는 제외)

3) RAGFlow Layout Detection 분리/모듈화
   -1. 배경: DiT가 각주·캡션·공식 등 세부 클래스 분리에 한계.
   -2. 조치: RAGFlow Docker 서비스에서 Layout Detection만 추출해 모듈화.
   -3. 관찰 결과(디폴트 임계값 0.2):
       - 장점: 논문 외 포맷에서도 DiT 대비 세분화/분류 품질 개선
       - 한계: 멀티 테이블 첫 개만 검출, 다중 클래스로 중복 분류, Figure 과검출, 박싱 여유 큼, 포스터류 취약, Text 박스 내 공식 별도 인식 불가

4) API 설계(작업자 크롭 전제)
   -1. FastAPI + Pydantic, 미들웨어 적용, JSON 반환
   -2. 엔드포인트:
       - /ocr/easy: ko+en 단순 텍스트 OCR
       - /math/latex: 수식 영역 LaTeX 변환
       - /table/markdown: 테이블 영역 Markdown 추출
   가정: 레이아웃/테이블/수식 검출은 작업자 수행(크롭 이미지 Base64 입력)

5) 한계 정리(현재 상태 기준)
   -1. DiT: 순서 무작위 반환, 각주/캡션/수식 텍스트로 혼합, 3+ 컬럼 취약
   -2. Table 파이프라인: 복잡/다중 테이블에서 누락·분절
   -3. 수식: 비논문 데이터에서 검출 어려움, 크롭 해상도 의존
   -4. 한자: 두 엔진 모두 인식률 저조(원인 분석 중)
   -5. RAGFlow 모듈: 과검출·중복·멀티 테이블 누락 등 특정 케이스 제약

6) Insights (주어진 내용 기반)
   -1. 레이아웃 우선 전략이 핵심: OCR 정확도는 엔진 선택보다 올바른 레이아웃 분할/순서 보정에 더 크게 좌우됨(DiT 순서 무작위 → 좌표 정렬 후 OCR로 개선).
   -2. 검출-추출 디커플링이 효과적: 테이블/수식을 별도 검출→본 OCR에서 제외하는 분리 파이프라인이 본문 품질을 안정화.
   -3. RAGFlow 보완 활용: 논문 외 문서에서 DiT의 취약점 보완 가능. 다만 멀티 테이블/중복 분류 등 명확한 한계가 있어 케이스별 조합 사용이 현실적.
   -4. 수식 품질의 병목은 ‘검출’: 변환 모델 자체보다 검출 정확도와 입력 해상도가 최종 LaTeX 품질을 결정.
