프로젝트명: 중복·유사·의도적 크롭 이미지 검출
기간/게시일: 2021년 2월 25일(최초) ~ 2022년 1월 25일(업데이트)

1. 배경과 목적
   -1. 수집 과정에서 동일 이용자 다중 업로드, 해상도/크롭 변형 등으로 중복·유사 이미지가 다량 발생 → 데이터 품질 저하 및 모델 성능 악화.
   -2. 목표: Unique face 중심 클러스터링과 원본–크롭 판별을 통해 중복·유사 이미지를 자동 검출·제거.

2. Near Duplicate Face Image Detection (2021.02.25 업데이트)
   -1. 문제 정의
       - 배경·의상 등 비본질 특성에 의해 군집이 뒤섞이는 문제 → 얼굴 자체를 key로 군집 필요.
   -2. 접근
       - 얼굴만 추출 후 K-means/DBSCAN 등 군집, Seed 이미지를 만들고 Seed 대비 local/global feature 유사도로 후보 선별.
       - 해시 기반 유사도(단일 1D hash)는 군집과 상성이 낮음 → feature 기반 + 군집으로 정리.
   -3. 이슈/해결
       - RGBA 등 채널 차이, 손상 이미지, 파일명 인코딩 문제 등 입출력 이슈를 확인·우회.

2) 완전 중복 이미지 검출 (2021.04.07 업데이트)
   -1. 데이터
       - 아동 사진 2만+ (라벨 없음). 일부 손상·한글 파일명 존재.
   -2. 알고리즘 파이프라인
       - EfficientNetB0(pretrained) feature 추출 → PCA 차원축소 → DBSCAN 군집 → 클러스터별 경로/파일명 매핑으로 User ID 추출.
       - 파라미터: eps 조절로 완전 중복(≈0.5) ↔ 유사 중복(≈50) 대응.
   -3. 결과
       - 완전+유사 중복 약 180쌍 중 ~130쌍(≈73%) 검출.
       - 유사도/포즈에 따른 오검출 위험 → eps, min_samples 튜닝 가이드 정리.

3) 완전/유사 이미지 검출 – LSH 파이프라인 (2022.01.14 업데이트)
   -1. 정의 & 시나리오
        - Near-duplicate: 사람이 보기에 거의 동일(배경 동일+사람만 다른 경우는 제외).
        - LSH(dHash/pHash) 기반으로 임계값(예: 0.9/0.95) 조절해 완전·유사 페어 추출.
   -2. 적용 사례 & 결과
       - 임계값 0.9에서 유사 페어 robust 검출, 배경만 동일·사람 다름은 비유사로 배제.
       - 고양이 7,738장 데이터: 완전 중복/유사 중복 예시 다수 검증(임계값 이슈로 1.00 대신 0.99 사용 권장).
       - CSV 출력 도구 제공(임계값/해시/밴드 수 등 CLI 인자 포함).
   -3. 성능/운영
       - 손상 이미지가 많을수록 속도 급감 → PIL LOAD_TRUNCATED_IMAGES 사용, I/O 최적화.
       - GPU가 CPU보다 약 30분 단축(7783장 기준: GPU 53분 vs CPU 84분 파이프라인 비교).
       - YOLOv5s.onnx CPU가 .pt CPU 대비 약 2분 빠름(미미).
       - 손상 없는 2008장: GPU 22분 vs CPU 26분.

4) 의도적으로 자른 이미지 검출 v0 (2022.01.25 업데이트)
   -1. 문제
        - 원본의 일부를 잘라 제출하는 부정 사례.
        - 원본–크롭 해상도/프레이밍 차이로 단순 유사도는 취약.
   -2. 전략
       - Query image 대신 Query object 개념 도입: YOLOv5로 대상 객체만 추출 후 비교.
       - LSH(dHash/pHash)로 원본–크롭 pair 탐지, 임계값 튜닝(예: 0.85).
   -3. 결과/한계
       - 데이터 따라 dHash vs pHash 최적 해쉬 다름(배경 복잡 시 pHash가 유리).
       - 케이스 일부에서 원본–크롭 100% 검출, 일반적으로는 >67% 유효.
       - SuperGlue(keypoint 매칭)로 정확도↑ 가능하나 연산량 과다(n×n 매칭, GPU 외 환경 부담)로 실용성 낮음.
       - 다객체 장면의 객체 선택/순서 혼선, YOLOv5의 추가 검출로 인한 페어 중복 등 출력 정규화 이슈 존재.

5. 운영/엔지니어링 메모 (History)
   - 한글 파일명: np.fromfile + cv2.imdecode로 로딩.
   - 손상 이미지 다수일 때 속도 저하 → 가능하면 사전 정제.
   - GPU 추론이 CPU 대비 ~4.5× 빠름(평균).
   - 경량화(Pruned/Quantized YOLOv5s) 시도는 환경 제약(Linux 의존)으로 실사용 어려움.

6. 결론
   -1. 혼합 전략이 실용적:
       - 대규모 1차 스크리닝: LSH(pHash/dHash) + 임계값 튜닝
       - 프로젝트 특성 반영: EfficientNetB0+PCA+DBSCAN (유사도 기반 군집/검수)
       - 의도적 크롭 의심: YOLOv5 Query object 기반 비교 (+ 제한적으로 SuperGlue)
   -2. 실제 적용에서 데이터 특성·운영 환경에 따라 해시/임계값/특징모델을 유연하게 선택하는 것이 핵심.
   -3. 성능은 데이터 품질, 손상 이미지 비율, 객체 검출 안정성에 크게 좌우됨.

7. Insight
   - EfficientNetB0+PCA+DBSCAN, LSH(dHash/pHash), YOLOv5 Query object 추출 등 다양한 방법을 조합해 완전·유사·크롭 이미지 검출 실험.
   - KT 프로젝트 적용 시 약 73% 검출률 확보, 일부 세팅에서 100% 검출 달성.
   - GPU/CPU, 손상 이미지 비율, 객체 검출 성능이 결과에 큰 영향을 미침을 확인.
   - Insight: 단일 알고리즘으로는 안정적 대응이 어렵고, 데이터 특성과 운영 환경에 맞춘 혼합 전략이 필요함을 알 수 있었음.
