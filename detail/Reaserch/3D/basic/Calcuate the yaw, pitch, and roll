Yaw: Z축 기준 회전 (Heading)
Pitch: Y축 기준 회전 (앞뒤 기울기)
Roll: X축 기준 회전 (좌우 기울기)

1) 회전 행렬(Rotation Matrix) → (Yaw, Pitch, Roll)
   - 3×3 회전 행렬 R 이 주어졌을 때 (ZYX 순서, 즉 roll→pitch→yaw):
   - Yaw (ψ) = atan2(R[1,0], R[0,0])
   - Pitch (θ) = atan2(-R[2,0], sqrt(R[2,1]² + R[2,2]²))
   - Roll (φ) = atan2(R[2,1], R[2,2])
   - 각도 범위(라디안):
     yaw ∈ (−π, π], pitch ∈ (−π/2, π/2), roll ∈ (−π, π]

2) 쿼터니언(Quaternion) → (Yaw, Pitch, Roll)
  쿼터니언 (w, x, y, z)가 주어졌을 때:

  # yaw (ψ)
  siny_cosp = 2*(w*z + x*y)
  cosy_cosp = 1 - 2*(y*y + z*z)
  yaw = atan2(siny_cosp, cosy_cosp)

  # pitch (θ)
  sinp = 2*(w*y - z*x)
  pitch = asin( clamp(sinp, -1, 1) )

  # roll (φ)
  sinr_cosp = 2*(w*x + y*z)
  cosr_cosp = 1 - 2*(x*x + y*y)
  roll = atan2(sinr_cosp, cosr_cosp)

3) 방향 벡터(Direction Vector) → (Yaw, Pitch)
   앞을 바라보는 단위 방향 벡터 d = (dx, dy, dz) 만 있을 경우:
   - Yaw = atan2(dy, dx)
   - Pitch = asin(dz) 또는 atan2(dz, sqrt(dx² + dy²))
   - Roll 은 ‘위쪽(up)’ 기준 벡터가 있어야 계산 가능 (없으면 정의 불가)

4) (Yaw, Pitch, Roll) → 방향 벡터
   X = cos(yaw) * cos(pitch)
   Y = sin(yaw) * cos(pitch)
   Z = sin(pitch)
   forward = (X, Y, Z)
-------------------------------------------------------------------------------
python example
import numpy as np

def rotation_to_euler(R):
    yaw = np.arctan2(R[1,0], R[0,0])
    pitch = np.arctan2(-R[2,0], np.sqrt(R[2,1]**2 + R[2,2]**2))
    roll = np.arctan2(R[2,1], R[2,2])
    return yaw, pitch, roll

def euler_to_direction(yaw, pitch):
    x = np.cos(yaw) * np.cos(pitch)
    y = np.sin(yaw) * np.cos(pitch)
    z = np.sin(pitch)
    return np.array([x, y, z])
