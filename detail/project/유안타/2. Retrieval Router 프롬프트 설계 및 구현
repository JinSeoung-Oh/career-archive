1) 목적
  - 금융 도메인에서 사용자 질의에 맞는 최적의 Retrieval 함수 선택을 자동화
  - 다양한 Retrieval 함수(get_stock_price, get_news_info, get_financial_data 등) 중 질의 의도에 맞는 함수 및 파라미터를 올바르게 매핑하는 
    Router Agent 개발
  - 단순 함수 매칭을 넘어, 함수 간 dependency 분석과 입출력 타입 검증까지 포함한 프롬프트 설계를 목표로 함

2) 주요 구현 내용
   (1) Prompt 설계
       -1. 사용자 입력을 분석 후 **의도 분류표(25개 카테고리)**에 따라 분류
       -2. 함수 선택 기준:
           -1) 입력/출력 파라미터 호환성 (case1, case2 의존성 체크)
           -2) 질의의 직접 답변 여부 + 2차 산출물 가능 여부 고려
           -3) 시장/섹터/종목 요청 시 company_code / index_code 변환 필수
           -4) search_ 계열 함수에 높은 가중치 부여
           -5) Input type 불명확 시 강제 함수 매칭 금지
       -3. 날짜 표현, 상대적 시점(오늘, 지난달, 내년)을 YYYYMMDD 형식으로 통일
   (2) 함수 매핑 예시
       -1. 예시 1:
           Query: "현재 삼성 전자의 주가가 얼마이고 주력하고 있는 산업이 뭐야?"
           → Router 결과:
             -1) Step1: get_stock_price (실시간 주가)
             -2) Step2: get_basic_info (기업 개요)
       -2. 예시 2:  
           Query: "최근 반년간의 삼성전자 주식이 어떻게 변했어?"
           → Router 결과:
           -1) Step1: get_stock_price_period (기간별 주가 데이터, start=20230401, end=20231001)
           -2) Graph_type: Line Chart

3) 결과
   -1. Retrieval Router는 자연어 질의 → 함수 매핑 → 실행 파라미터 자동 생성을 성공적으로 수행
   -2. 단순한 Q&A를 넘어, 멀티 스텝 함수 의존성 연결 가능성 입증
   -3. 실제 금융 서비스 적용 시, 다양한 질의 패턴을 하나의 프롬프트 구조로 통합할 수 있음

4) 인사이트
   -1. 함수 선택의 정확성은 프롬프트 설계의 세밀함에 크게 의존 → 의도 분류표와 가이드라인 정의가 필수적임
   -2. 자연어 → 코드 파라미터 변환은 Rule 기반 보정보다 LLM 기반 reasoning이 더 효과적임
   -3. 한계점:
       - context가 모호하거나 parameter 추론이 불가능한 경우 empty array 반환 → 사용자가 허용 가능한 fallback 전략 필요
       - 금융 도메인 특화라서 범용성 확보는 추가 연구 필요
